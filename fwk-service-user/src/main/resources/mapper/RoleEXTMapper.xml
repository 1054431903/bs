<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fwk.service.user.dao.RoleDao">

	<select id="queryRole" parameterType="map" resultType="com.fwk.service.user.entity.RoleEXT">
		select r.*
		,GROUP_CONCAT(p.permissionname) as permissionnames
		,GROUP_CONCAT(p.id) as permissionids
		from t_u_role r
		left join t_u_role_permission rp on rp.roleid = r.id
		left join t_u_permission p on p.id = rp.permissionid
		where 1=1
		<include refid="where_sql" />
		group by r.id
		order by p.id
		<include refid="limit_sql" />
	</select>
	
	<select id="queryRoleCount" parameterType="map" resultType="int">
		select count(r.id)
		from t_u_role r
		where 1=1
		<include refid="where_sql" />
	</select>
	
	<select id="queryRoleTree" parameterType="map" resultType="com.fwk.service.user.entity.OrgDepartUserTreeDefine">
		select r.id,r.rolename as name,'4' as sign from t_u_role r <!-- where r.orgid = #{orgid} -->
	</select>

	<insert id="insertRole" parameterType="map" useGeneratedKeys="true" keyProperty="id">
		insert into t_u_role (id, rolename, description,platform,orgid)
	    values (#{id,jdbcType=INTEGER}, #{rolename,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},#{platform,jdbcType=VARCHAR},#{orgid,jdbcType=INTEGER})
	</insert>
	
	<update id="updateRole" parameterType="map">
		update t_u_role
	    <set>
	      <if test="rolename != null">
	        rolename = #{rolename,jdbcType=VARCHAR},
	      </if>
	      <if test="description != null">
	        description = #{description,jdbcType=VARCHAR},
	      </if>
	      <if test="platform != null">
	        platform = #{platform,jdbcType=VARCHAR},
	      </if>
	      <if test="creattime != null">
	        creattime = #{creattime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="delstate != null">
	        delstate = #{delstate,jdbcType=INTEGER},
	      </if>
	    </set>
	    where id = #{id}
	</update>
	
	<insert id="insertUserRole" parameterType="map">
		insert into t_u_user_role (userid, roleid)
	    values (#{userid,jdbcType=INTEGER}, #{roleid,jdbcType=INTEGER})
	</insert>
	
	<delete id="deleteUserRole" parameterType="map">
		delete from t_u_user_role 
		<where>
			<if test="userid != null">
				and userid = #{userid}
			</if>
			<if test="id != null">
				and id = #{id}
			</if>
		</where>
	</delete>
	
	<sql id="where_sql">
		<choose>
			<when test="id != null and rolename != null">
				and (r.id = #{id} || r.rolename like CONCAT('%',#{rolename},'%'))
			</when>
			<otherwise>
				<if test="id != null">
					and r.id = #{id}
				</if>
				<if test="rolename != null and rolename != ''">
					and r.rolename like CONCAT('%',#{rolename},'%')
				</if>
			</otherwise>
		</choose>
		<choose>
			<when test="delstate != null">
				and r.delstate = #{delstate}
			</when>
			<otherwise>
				and r.delstate = 1
			</otherwise>
		</choose>
		<if test="noid != null">
			and r.id != #{noid}
		</if>
		<if test="loginorgid != null">
			and r.orgid = #{loginorgid}
		</if>
	</sql>
	
	<sql id="limit_sql">
		<choose>
			<when test="pageSize !=null and currentPage !=null">
				limit ${(currentPage-1)*pageSize},${pageSize}
			</when>
			<otherwise>
				limit 0,99999
			</otherwise>
		</choose>
	</sql>
</mapper>